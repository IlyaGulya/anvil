apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'java-test-fixtures'
apply from: rootProject.file('publishing.gradle')

kotlin {
  explicitApi()
}

def isIdeSync = getSystemProperty('idea.sync.active', 'false').toBoolean()

dependencies {
  api project(':annotations')
  api project(':compiler-api')
  api deps.kotlin.compiler
  api deps.kotlinpoet

  implementation deps.dagger2.dagger
  implementation deps.inject

  testFixturesApi kotlinCompileTesting
  testFixturesImplementation project(':compiler')
  testFixturesImplementation deps.dagger2.compiler
  testFixturesImplementation deps.dagger2.dagger
  testFixturesImplementation deps.junit
  testFixturesImplementation deps.truth

  // Necessary because this is what dagger uses when it runs to support instantiating annotations at runtime
  testFixturesImplementation deps.auto.value.annotations
  testFixturesImplementation deps.auto.value.processor

  // This workaround is needed to resolve classes in the IDE properly.
  if (isIdeSync) {
    compileOnly project(':compiler')
    compileOnly deps.dagger2.compiler
    compileOnly deps.junit
    compileOnly kotlinCompileTesting
    compileOnly deps.truth
  }
}

// We conditionally include one of two source sets here because there are some breaking API changes
// between Kotlin 1.7 and 1.8. We must support both until 1.8 is fully released and we drop 1.7.
if (rootProject.ext.kotlinPreview) {
  sourceSets.testFixtures.java.srcDirs += ['src/testFixtures/preview']

  //noinspection UnnecessaryQualifiedReference
  tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    compilerOptions {
      freeCompilerArgs.add("-opt-in=org.jetbrains.kotlin.compiler.plugin.ExperimentalCompilerApi")
    }
  }
} else {
  sourceSets.testFixtures.java.srcDirs += ['src/testFixtures/stable']
}

private def getSystemProperty(String name, String defaultValue = null) {
  def provider = providers.systemProperty(name).forUseAtConfigurationTime()
  if (defaultValue) {
    return provider.getOrElse(defaultValue)
  } else {
    return provider.getOrNull()
  }
}

