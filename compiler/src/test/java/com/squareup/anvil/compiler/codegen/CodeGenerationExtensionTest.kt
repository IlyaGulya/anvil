package com.squareup.anvil.compiler.codegen

import com.google.common.truth.Truth.assertThat
import com.squareup.anvil.compiler.api.AnvilContext
import com.squareup.anvil.compiler.api.CodeGenerator
import com.squareup.anvil.compiler.api.GeneratedFile
import com.squareup.anvil.compiler.api.createGeneratedFile
import com.squareup.anvil.compiler.compile
import com.squareup.anvil.compiler.internal.isInterface
import com.squareup.anvil.compiler.internal.reference.classesAndInnerClasses
import com.squareup.anvil.compiler.internal.reference.isInterface
import com.squareup.anvil.compiler.isError
import com.tschuchort.compiletesting.KotlinCompilation.ExitCode.OK
import org.intellij.lang.annotations.Language
import org.jetbrains.kotlin.descriptors.ModuleDescriptor
import org.jetbrains.kotlin.psi.KtFile
import org.junit.Test
import java.io.File

class CodeGenerationExtensionTest {

  @Test fun `generated files with the same path and different content are an error`() {
    val codeGenerator = object : CodeGenerator {
      override fun isApplicable(context: AnvilContext): Boolean = true

      override fun generateCode(
        codeGenDir: File,
        module: ModuleDescriptor,
        projectFiles: Collection<KtFile>
      ): Collection<GeneratedFile> {
        return projectFiles
          .classesAndInnerClasses(module)
          .filter { it.isInterface() }
          .map { clazz ->
            val generatedPackage = "generated.com.squareup.test"

            @Language("kotlin")
            val content = """
                package $generatedPackage
      
                class Abc${clazz.nameAsSafeName}
              """

            createGeneratedFile(
              codeGenDir = codeGenDir,
              packageName = generatedPackage,
              fileName = "Abc",
              content = content
            )
          }
          .toList()
      }
    }

    compile(
      """
      package com.squareup.test

      interface ComponentInterface1
      
      interface ComponentInterface2
      """,
      codeGenerators = listOf(codeGenerator)
    ) {
      assertThat(exitCode).isError()

      // Replacing the character is necessary for running the tests on Windows.
      assertThat(messages.replace('\\', '/')).contains(
        "There were duplicate generated files. Generating and overwriting the same file " +
          "leads to unexpected results. The relative path is: " +
          "generated/com/squareup/test/Abc.kt. The file was generated by class " +
          "com.squareup.anvil.compiler.codegen.CodeGenerationExtensionTest\$generated files " +
          "with the same path and different content are an error\$codeGenerator\$1. The input " +
          "files were [Source0.kt]."
      )
    }
  }

  @Test fun `generated files with the same path and same content are allowed`() {
    val codeGenerator = object : CodeGenerator {
      override fun isApplicable(context: AnvilContext): Boolean = true

      override fun generateCode(
        codeGenDir: File,
        module: ModuleDescriptor,
        projectFiles: Collection<KtFile>
      ): Collection<GeneratedFile> {
        return projectFiles
          .classesAndInnerClasses(module)
          .filter { it.isInterface() }
          .map { _ ->
            val generatedPackage = "generated.com.squareup.test"

            @Language("kotlin")
            val content = """
                package $generatedPackage
      
                class Abc
              """

            createGeneratedFile(
              codeGenDir = codeGenDir,
              packageName = generatedPackage,
              fileName = "Abc",
              content = content
            )
          }
          .toList()
      }
    }

    compile(
      """
      package com.squareup.test

      interface ComponentInterface1
      
      interface ComponentInterface2
      """,
      codeGenerators = listOf(codeGenerator)
    ) {
      assertThat(exitCode).isEqualTo(OK)
    }
  }
}
