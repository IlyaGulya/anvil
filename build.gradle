import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
  dependencies {
    // This resolves to the gradle-plugin artifact generated by the delegate build.
    // Now that it's in the build classpath, it can be applied by its ID in subprojects.
    classpath 'com.squareup.anvil:gradle-plugin'
  }
}

plugins {
  alias libs.plugins.agp.application apply false
  alias libs.plugins.agp.library apply false
  alias libs.plugins.gradlePublish apply false
  alias libs.plugins.kotlin.android apply false
  alias libs.plugins.kotlin.dokka apply false
  alias libs.plugins.kotlin.jvm apply false
  alias libs.plugins.kotlin.kapt apply false
  alias libs.plugins.kotlin.multiplatform apply false
  alias libs.plugins.mavenPublishBase apply false
  id 'com.squareup.anvil.root'
}

allprojects {
  version = property("VERSION_NAME")
}

boolean isCi = (System.getenv('CI') ?: 'false').toBoolean()
String kotlinVersion = libs.versions.kotlin.get()

ext {
  ci = isCi
  fullTestRun = libs.versions.config.fullTestRun.get().toBoolean()
  warningsAsErrors = isCi
}

println "Versions: " + [
  "Kotlin": kotlinVersion,
  "Gradle": gradle.gradleVersion,
  "Full test run": ext.fullTestRun,
]

subprojects {

  tasks.withType(Test).configureEach {
    testLogging {
      events 'passed', 'failed', 'skipped', 'standardOut', 'standardError'
      exceptionFormat 'FULL'
      showCauses true
      showExceptions true
      showStackTraces true
      showStandardStreams true
    }
  }

  // Dynamically configure JVM targets because Dagger compiler always uses the java 11 @Generated
  // annotation regardless of release target
  boolean isIntegrationTestOrSample = project.path.startsWith(":integration-test") ||
    project.path.startsWith(":sample")

  pluginManager.withPlugin("java") {
    // Use JDK 11 but target Java 8 for maximum compatibility.
    java {
      toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
      }
    }

    tasks.withType(JavaCompile).configureEach {
      if (isIntegrationTestOrSample) {
        options.release.set(11)
      } else {
        options.release.set(8)
      }
    }
  }

  tasks.withType(KotlinCompile).configureEach {
    compilerOptions {
      if (isIntegrationTestOrSample) {
        jvmTarget.set(JvmTarget.JVM_11)
      } else {
        jvmTarget.set(JvmTarget.JVM_1_8)
      }

      allWarningsAsErrors.set(warningsAsErrors)
      freeCompilerArgs.add("-opt-in=kotlin.RequiresOptIn")

      boolean optInExperimental = project.name != "annotations"
        && project.name != "annotations-optional"
        && project.name != "scopes"
        && project.name != "dagger-factories-only"
      if (project.path != ':gradle-plugin' && optInExperimental) {
        freeCompilerArgs.add("-opt-in=com.squareup.anvil.annotations.ExperimentalAnvilApi")
      }
    }
  }

  configurations.configureEach {
    resolutionStrategy {
      force libs.kotlin.metadata
    }
  }
}

// Delete orphaned files from previous builds.  These directories aren't used by a current project,
// so `./gradlew clean` doesn't touch them.
tasks.register('deleteOrphanedDirs', Delete) {
  delete(
    'buildSrc',
    'gradle-plugin-build-logic',
    'build-logic/.gradle',
    'build-logic/build',
    'gradle-plugin/build-composite-wrapper'
  )
}
tasks.clean { dependsOn('deleteOrphanedDirs') }
