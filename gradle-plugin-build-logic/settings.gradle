pluginManagement {
  repositories {
    google()
    gradlePluginPortal()
    mavenCentral()
  }

  includeBuild('../build-logic')
}

rootProject.name = "gradle-plugin-build-logic"

dependencyResolutionManagement {
  versionCatalogs {
    libs {
      from(files("../gradle/libs.versions.toml"))
      System.properties.each { key, value ->
        if (key.toString().startsWith("override_")) {
          String catalogKey = key.substring("override_".length())
          println "Overriding $catalogKey with $value"
          version(catalogKey, value.toString())
        }
      }
    }
  }

  repositories {
    gradlePluginPortal()
    google()
    mavenCentral()
    if (hasProperty("anvil.allowSnapshots")) {
      maven { url 'https://maven.pkg.jetbrains.space/kotlin/p/kotlin/dev' }
      maven { url 'https://maven.pkg.jetbrains.space/kotlin/p/kotlin/bootstrap' }
      maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots' }
      maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    }
  }
}

include ':gradle-plugin'
project(':gradle-plugin').projectDir = file('../gradle-plugin')
include ':annotations'
project(':annotations').projectDir = file('../annotations')
include ':annotations-optional'
project(':annotations-optional').projectDir = file('../annotations-optional')
include ':compiler'
project(':compiler').projectDir = file('../compiler')
include ':compiler-api'
project(':compiler-api').projectDir = file('../compiler-api')
include ':compiler-utils'
project(':compiler-utils').projectDir = file('../compiler-utils')

// TODO delete me
includeBuild '../../kase'
